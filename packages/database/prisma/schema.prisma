datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

enum AccountStatus {
  CREATED
  ONBOARDING_STARTED
  UNDER_REVIEW
  ACTIVE
}

enum CircutStatus {
  DRAFT
  DEPLOYED
  ARCHIEVED
}

enum CircutPrivacy {
  PRIVATE
  PUBLIC
}

enum LLMType {
  ANTHROPIC
  OPENAI
  MISTRAL
  TOGETHER
  GROQ
  GOOGLE
  COHERE
  FIREWORKS
  PERPLEXITY
  DEEPSEEK
  XAI
}

model User {
  clerkId         String        @id
  name            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  email           String        @unique
  avatarUrl       String?
  blockedAt       DateTime?
  meta            Json          @default("{}")
  profileSettings Json          @default("{}")
  featureSettings Json          @default("{}")
  Organization    Organization? @relation(fields: [organizationId], references: [id])
  organizationId  String?
  Circut          Circut[]
  Memory          Memory[]
}

model Organization {
  id                      String   @id
  name                    String
  imgUrl                  String?
  slug                    String?
  membersCount            Int?
  pendingInvitationsCount Int?
  adminDeleteEnabled      Boolean?
  maxAllowedMemberships   Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  publicMetadata          Json     @default("{}")

  users       User[]
  circuts     Circut[]
  apiKeys     APIKey[]
  Memory      Memory[]
  Integration Integration[]
}

model Circut {
  id                 String        @id @default(cuid())
  name               String
  apiKey             String        @default(uuid())
  privacy            CircutPrivacy @default(PRIVATE)
  description        String?
  systemInstructions String        @default("You're a helpful AI assistant.")
  orgId              String
  createdBy          String
  jsonMode           Boolean       @default(false)
  moderation         Boolean       @default(true)
  streamMode         Boolean       @default(true)
  storeMessages      Boolean       @default(true)
  org                Organization  @relation(fields: [orgId], references: [id])
  user               User          @relation(fields: [createdBy], references: [clerkId])
  config             Json? // Store dynamic circut configurations like apiKey, model, temperature
  version            Int           @default(1)
  status             CircutStatus  @default(DRAFT)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  tools            CircutTool[]
  workflows        Workflow[]
  ExecutionHistory ExecutionHistory[]
  versions         CircutVersion[]
  memories         CircutMemory[]
}

model CircutVersion {
  id        String   @id @default(cuid())
  circutId  String
  circut    Circut   @relation(fields: [circutId], references: [id])
  version   Int
  config    Json
  createdAt DateTime @default(now())
}

model Workflow {
  id           String   @id @default(cuid())
  name         String
  description  String?
  circutId     String
  circut       Circut   @relation(fields: [circutId], references: [id])
  steps        Json
  inputSchema  Json?
  outputSchema Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum MemorySourceType {
  MANUAL
  FILE
}

model Memory {
  id          String @id @default(cuid())
  name        String
  description String

  orgId          String
  createdBy      String
  user           User             @relation(fields: [createdBy], references: [clerkId])
  org            Organization     @relation(fields: [orgId], references: [id])
  embedding      Bytes?
  embeddingModel LLMType
  sourceType     MemorySourceType @default(FILE)
  content        String? // Original text/content that generated the vector
  metadata       Json? // Additional info (e.g., tags, source, timestamps)
  relevance      Float? // Relevance score for vector-based retrieval
  confidence     Float?
  lastAccessed   DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  memoryAudit    MemoryAudit[] // History of changes to memory
  documents      Document[]
  CircutMemory   CircutMemory[]
}

model CircutMemory {
  id       String @id @default(cuid())
  circutId String
  memoryId String
  memory   Memory @relation(fields: [memoryId], references: [id])
  circut   Circut @relation(fields: [circutId], references: [id])
}

// FOR LATER USE IF WE WANT TO ADD SOME THIRD PARTY INTEGRATIONS
model Integration {
  id          String       @id @default(cuid())
  name        String
  description String?
  type        String // e.g., "slack", "email"
  config      Json
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum DocumentProcessingStatus {
  PENDING
  INDEXED
  FAILED
}

model Document {
  id               String                   @id @default(cuid())
  memoryId         String
  memory           Memory                   @relation(fields: [memoryId], references: [id])
  fileName         String
  fileType         String
  fileUrl          String
  fileSize         Int?
  uploadDate       DateTime                 @default(now())
  extractedContent String?
  processingStatus DocumentProcessingStatus @default(PENDING)
  filePath         String?
  sourceUrl        String?
}

model Tool {
  id          String   @id @default(cuid())
  name        String
  description String?
  apiUrl      String
  config      Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  CircutTool CircutTool[]
}

model CircutTool {
  id       String @id @default(cuid())
  circutId String
  circut   Circut @relation(fields: [circutId], references: [id])
  toolId   String
  tool     Tool   @relation(fields: [toolId], references: [id])
}

model APIKey {
  id        String       @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id])
  type      LLMType
  key       String       @unique
  createdAt DateTime     @default(now())
  revokedAt DateTime?
}

model MemoryAudit {
  id         String   @id @default(cuid())
  memoryId   String
  memory     Memory   @relation(fields: [memoryId], references: [id])
  action     String // e.g., 'created', 'updated', 'deleted'
  changeData Json
  createdAt  DateTime @default(now())
}

model ExecutionHistory {
  id            String          @id @default(cuid())
  circutId      String
  circut        Circut          @relation(fields: [circutId], references: [id])
  executionId   String
  input         Json
  output        Json
  duration      Int // Execution time in milliseconds
  memoryUsage   Int?
  apiCallsCount Int?
  status        ExecutionStatus
  errorMessage  String?
  createdAt     DateTime        @default(now())
}

enum ExecutionStatus {
  SUCCESS
  FAILED
  IN_PROGRESS
}
